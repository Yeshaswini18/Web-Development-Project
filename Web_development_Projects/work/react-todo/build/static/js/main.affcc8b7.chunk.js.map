{"version":3,"sources":["services.js","LoginPage.jsx","DisplayTasks.jsx","TodoPage.jsx","DisplayLoggedInPage.jsx","App.jsx","serviceWorker.js","index.js"],"names":["fetchGetTasks","username","fetch","method","catch","Promise","reject","code","then","response","ok","json","err","fetchUpdateTask","taskId","task","headers","body","JSON","stringify","message","LoginPage","useState","userInfo","setUserInfo","setUsername","error","setError","performLogin","test","fetchLogIn","data","className","value","onChange","e","target","onClick","DisplayTasks","tasks","performReadAll","newTask","setNewTask","id","setId","performDelete","fetchDeleteTask","Object","keys","map","key","type","class","done","name","performEditTask","status","performUpdateTask","performUpdateStatus","TodoPage","setTask","setTasks","setValue","performAddTask","fetchAddTask","performDeleteAll","sort","result","values","a","b","forEach","val","for","performSort","DisplayLoggedInPage","loggedOut","setloggedOut","theme","setTheme","performLogout","performSetTheme","fetchUpdateTheme","performGetTheme","App","content","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.affcc8b7.chunk.js","sourcesContent":["export const fetchHomePage = () => {\n    return fetch(`/session`, {\n        method: \"GET\"\n    })\n    .catch( () => {\n        return Promise.reject({message: 'network-error'});\n    })\n    .then( (response) => {\n        if(response.ok) {\n            return response.json();\n        }\n        return response.json()\n        .then( err => Promise.reject(err) );\n    });\n};\n\nexport const fetchLogIn = (username) => {\n    return fetch(`/session`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            username: username\n        })\n    })\n    .catch( () => {\n        return Promise.reject({message: 'network-error'});\n    })\n    .then( (response) => {\n        if(response.ok) {\n            return response.json();\n        }\n        return response.json()\n        .then( err => Promise.reject(err) );\n    });\n};\n\nexport const fetchLogOut = () => {\n    return fetch('/session', {\n        method: 'DELETE',\n    })\n    .catch( () => {\n        return Promise.reject({code: 'network-error'});\n    })\n    .then( (response) => {\n        if(response.ok) {\n            return response.json();\n        }\n        return response.json()\n        .then( err => Promise.reject(err) );\n    });\n};\n\nexport const fetchGetTheme = (username) => {\n    return fetch(`/theme/${username}`, {\n        method: 'GET',\n    })\n    .catch( () => {\n        return Promise.reject({code: 'network-error'});\n    })\n    .then( (response) => {\n        if(response.ok) {\n            return response.json();\n        }\n        return response.json()\n        .then( err => Promise.reject(err) );\n    });\n};\n\nexport const fetchUpdateTheme = (username, theme) => {\n    return fetch(`/theme/${username}`, {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            theme: theme\n        })\n    })\n    .catch( () => {\n        return Promise.reject({message: 'network-error'});\n    })\n    .then( (response) => {\n        if(response.ok) {\n            return response.json();\n        }\n        return response.json()\n        .then( err => Promise.reject(err) );\n    });\n};\n\nexport const fetchGetTasks = (username) => {\n    return fetch(`/tasks/${username}`, {\n        method: 'GET',\n    })\n    .catch( () => {\n        return Promise.reject({code: 'network-error'});\n    })\n    .then( (response) => {\n        if(response.ok) {\n            return response.json();\n        }\n        return response.json()\n        .then( err => Promise.reject(err) );\n    });\n};\n\nexport const fetchDeleteTasks = (username) => {\n    return fetch(`/tasks/${username}`, {\n        method: 'DELETE'\n    })\n    .catch( () => {\n        return Promise.reject({message: 'network-error'});\n    })\n    .then( (response) => {\n        if(response.ok) {\n            return response.json();\n        }\n        return response.json()\n        .then( err => Promise.reject(err) );\n    });\n};\n\nexport const fetchAddTask = (username, task) => {\n    return fetch(`/tasks/${username}`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            task: task\n        })\n    })\n    .catch( () => {\n        return Promise.reject({message: 'network-error'});\n    })\n    .then( (response) => {\n        if(response.ok) {\n            return response.json();\n        }\n        return response.json()\n        .then( err => Promise.reject(err) );\n    });\n};\n\nexport const fetchGetTask = (username, taskId) => {\n    return fetch(`/tasks/${username}/${taskId}`, {\n        method: 'GET',\n    })\n    .catch( () => {\n        return Promise.reject({code: 'network-error'});\n    })\n    .then( (response) => {\n        if(response.ok) {\n            return response.json();\n        }\n        return response.json()\n        .then( err => Promise.reject(err) );\n    });\n};\n\nexport const fetchDeleteTask = (username, taskId) => {\n    return fetch(`/tasks/${username}/${taskId}`, {\n        method: 'DELETE'\n    })\n    .catch( () => {\n        return Promise.reject({message: 'network-error'});\n    })\n    .then( (response) => {\n        if(response.ok) {\n            return response.json();\n        }\n        return response.json()\n        .then( err => Promise.reject(err) );\n    });\n};\n\nexport const fetchUpdateTask = (username, taskId, task) => {\n    return fetch(`/tasks/${username}/${taskId}`, {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            task: task\n        })\n    })\n    .catch( () => {\n        return Promise.reject({message: 'network-error'});\n    })\n    .then( (response) => {\n        if(response.ok) {\n            return response.json();\n        }\n        return response.json()\n        .then( err => Promise.reject(err) );\n    });\n};\n","import React from 'react';\nimport {fetchLogIn} from './services';\nimport { useState } from 'react';\nimport DisplayLoggedInPage from './DisplayLoggedInPage';\nimport './App.css';\n\nfunction LoginPage(){\n    const [userInfo, setUserInfo] = useState();\n    const [username, setUsername] = useState('');\n    const [error, setError] = useState();\n\n    const performLogin = (username) => {\n        if (/^ *$/.test(username)) {\n            setError(\"Enter a valid username\");\n            setUsername('');\n        } else {\n            setError('');\n            fetchLogIn(username)\n            .then((userInfo) => setUserInfo(userInfo.data.username))\n            .catch((error) => setError(error.message))\n        }   \n    }\n\n    if(userInfo) {\n        return(\n            <DisplayLoggedInPage userInfo={username} />\n        );\n    }\n\n    return(\n        <div className=\"login\">\n            <h2 className=\"error\">{error}</h2>\n            <label className=\"username\">Username:<input value={username} onChange={(e) => setUsername(e.target.value)}/></label>\n            <button className=\"login-button\" onClick={() => performLogin(username)}>Login</button>\n        </div>\n    );\n\n}\n\nexport default LoginPage;","import React from 'react';\nimport { useState } from 'react';\nimport { fetchDeleteTask, fetchUpdateTask } from './services';\nimport './App.css'\n\nfunction DisplayTasks({tasks, userInfo, performReadAll}) {\n    const [newTask, setNewTask] = useState('');\n    const [id, setId] = useState(''); // identifier needed to match with taskId condition for onChange\n    const [error, setError] = useState();\n\n    const performDelete = (taskId) => {        \n        fetchDeleteTask(userInfo, taskId)\n        .then(() => performReadAll())\n        .catch((error) => setError(error.message))\n    }\n\n    const performUpdateTask = (taskId, status) => {       \n        fetchUpdateTask(userInfo, taskId, {done:status, name: newTask})\n        .then(() => performReadAll())\n        .catch((error) => setError(error.message))\n        \n        setId('');\n        setNewTask('');\n    }\n\n    const performUpdateStatus = (taskId, status, name) => {       \n        fetchUpdateTask(userInfo, taskId, {done: !status, name: name})\n        .then(() => performReadAll())\n        .catch((error) => setError(error.message))\n    }\n\n    const performEditTask = (taskId, e) => {\n        setId(taskId);\n        setNewTask(e.target.value);\n    }\n\n    return (\n        Object.keys(tasks).map((taskId) => (\n        <div className=\"task\" key={taskId}><h2 className=\"error\">{error}</h2>\n            <p><span className=\"delete\" onClick={() => performDelete(taskId)}>X</span>\n            <input id={taskId} type=\"task-text\" class={tasks[taskId].done ? \"mark-done\" : \"done\"} name=\"task-field\" value={taskId === id ? newTask : tasks[taskId].name } onChange={(e) => {performEditTask(taskId, e)}}/>\n            <button class=\"update\" type=\"button\" onClick={() => performUpdateTask(taskId, tasks[taskId].done)}>Update</button>\n            <button class=\"done-button\" type=\"button\" onClick={() => performUpdateStatus(taskId, tasks[taskId].done, tasks[taskId].name)}>{tasks[taskId].done ? 'Done': 'MarkDone'}</button>\n            </p></div>\n        ))\n    );\n\n}\n\nexport default DisplayTasks;\n","import React from 'react';\nimport { useState } from 'react';\nimport { fetchGetTasks, fetchDeleteTasks, fetchAddTask } from './services';\nimport DisplayTasks from './DisplayTasks';\nimport './App.css';\n\nfunction TodoPage({userInfo}) {\n    const [task, setTask] = useState();\n    const [error, setError] = useState();\n    const [tasks, setTasks] = useState({});\n    const [value, setValue] = useState();\n\n    const performAddTask = () => {   \n        if (typeof task === 'undefined' || /^ *$/.test(task)) {\n            setError(\"Enter a valid task\");\n            setTask(\"\");\n        } else {\n            setError('');\n\n            fetchAddTask(userInfo, {done: false, name: task})\n            .then(() => performReadAll())\n            .catch((error) => setError(error.message))\n            setTask('');\n        }\n    }\n\n    const performReadAll = () => {\n        setError('');\n\n        fetchGetTasks(userInfo)\n        .then((tasks) => setTasks(tasks.data))\n        .catch((error) => setError(error.message))\n    }\n\n    const performRefresh = () => {\n        setError('');\n\n        fetchGetTasks(userInfo)\n        .then((tasks) => sort(tasks, value))\n        .then((result) => setTasks(result))\n        .catch((error) => setError(error.message))\n    }\n\n    const performDeleteAll = () => {    \n        setError('');\n\n        fetchDeleteTasks(userInfo)\n        .then(() => performReadAll())\n        .catch((error) => setError(error.message))\n    }\n\n    const performSort = (value) => {\n        setError('');\n        setValue(value);\n\n        fetchGetTasks(userInfo)\n        .then((tasks) => sort(tasks, value))\n        .then((result) => setTasks(result))\n        .catch((error) => setError(error.message))\n    }\n\n    const sort = (tasks, value) => {\n        const result = {};\n\n        if (value === \"ascending\") {\n            const sorted = Object.values(tasks.data).sort((a,b) => (a.name > b.name ? 1 : -1));\n            sorted.forEach(val => (result[val.taskId] = val));\n        } else if (value === \"descending\") {\n            const sorted = Object.values(tasks.data).sort((a,b) => (a.name > b.name ? -1 : 1));\n            sorted.forEach(val => (result[val.taskId] = val));\n        } else if (value === \"Completed-tasks\") {\n            const sorted = Object.values(tasks.data).sort((a,b) => (a.done === b.done)? 0 : a.done ? -1 : 1);\n            sorted.forEach(val => (result[val.taskId] = val));\n        } else if (value === \"Incomplete-tasks\"){\n            const sorted = Object.values(tasks.data).sort((a,b) => (a.done === b.done)? 0 : a.done ? 1 : -1);\n            sorted.forEach(val => (result[val.taskId] = val));\n        } else {\n            return tasks.data;\n        }\n        return result;\n    }\n\n    return(\n        <div>\n            <h2 className=\"error\">{error}</h2>\n            <button className=\"delete-all\" onClick={() => performDeleteAll()}>DeleteAll</button>\n            <button className=\"refresh-button\" onClick={() => performRefresh()}>Refresh</button>\n            <label>Enter Task<input class=\"add-task\" value={task} onChange={(e) => setTask(e.target.value)}/></label>\n            <button type=\"button\" class=\"to-add\" onClick={() => performAddTask()}>Add</button>\n            <span className=\"sorting\">\n                <label for=\"tasks\">Sort:</label>\n                <select name=\"theme\" id=\"themes\" onChange={(e) => {setValue(e.target.value); performSort(e.target.value)}}>\n                <option value=\"select-order\">select-order</option>\n                <option value=\"ascending\">ascending</option>\n                <option value=\"descending\">descending</option>\n                <option value=\"Completed-tasks\">Completed-tasks</option>\n                <option value=\"Incomplete-tasks\">Incomplete-tasks</option>\n                </select>\n            </span>\n            <DisplayTasks tasks={tasks} userInfo={userInfo} performReadAll={() => performReadAll()}/>\n        </div>\n    );\n}\n\nexport default TodoPage;\n","import React from 'react';\nimport LoginPage from './LoginPage';    \nimport { useState } from 'react';\nimport TodoPage from './TodoPage';\nimport { fetchLogOut, fetchUpdateTheme, fetchGetTheme } from './services';\nimport './App.css';\n\n\nfunction DisplayLoggedInPage({userInfo}) {\n    const [loggedOut, setloggedOut] = useState(false);\n    const [theme, setTheme] = useState();\n    const [error, setError] = useState();\n\n    const performLogout = () => {\n        setError('')\n\n        fetchLogOut()\n        .then(() => setloggedOut(true))\n        .catch((error) => setError(error.message))\n    }\n\n    const performSetTheme = (theme) => {\n        setError('')\n        \n        fetchUpdateTheme(userInfo, theme)\n        .then(() => performGetTheme())\n        .catch((error) => setError(error.message))\n    }\n\n    const performGetTheme = () => {\n        setError('')\n        \n        fetchGetTheme(userInfo)\n        .then((theme) => setTheme(theme.data))\n        .catch((error) => setError(error.message))\n    }\n\n    if (loggedOut) {\n        return (\n            <LoginPage />\n        );\n    }\n\n    return(\n        <div>\n            <div className={theme ? theme : \"light\"}>\n                <h1 className=\"header\">Welcome to your Page</h1>\n                <h2 className=\"error\">{error}</h2>\n                <div className=\"choose-theme\">\n                    <label for=\"theme\">Choose a theme:</label>\n                    <select name=\"theme\" id=\"themes\" onChange={(e) => performSetTheme(e.target.value)}>\n                    <option value=\"light\">light</option>\n                    <option value=\"dark\">dark</option>\n                    <option value=\"colorful\">colorful</option>\n                    </select>\n                </div>\n            </div>\n            <button className=\"logout-button\" onClick={() => performLogout()}>Logout</button>\n            <div className=\"todo-page\">\n                <TodoPage userInfo={userInfo} />\n            </div>\n        </div>\n    );\n}\n\nexport default DisplayLoggedInPage;","import  React from 'react';\nimport './App.css';\nimport DisplayLoggedInPage from './DisplayLoggedInPage';\nimport {fetchHomePage} from './services';\nimport LoginPage from './LoginPage';\nimport { useState, useEffect } from 'react';\n\nfunction App() {\n  const [userInfo, setUserInfo] = useState();\n  const[error, setError] = useState();\n  let content;\n\n  useEffect(() => {\n      setError('');\n\n      fetchHomePage()\n      .then(userInfo => setUserInfo(userInfo.data.username))\n      .catch(error => setError(error.message));     \n  },[]);\n\n  if (error === \"no valid session\") {\n    setError('     ')\n  }\n\n  if (error) {\n    content = <LoginPage />\n  } else {\n    content = <DisplayLoggedInPage userInfo={userInfo}/>\n  }\n\n  return (\n    <div className=\"App\">\n      <h2 className=\"error\">{error}</h2>\n      {content}\n    </div>\n  );            \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}