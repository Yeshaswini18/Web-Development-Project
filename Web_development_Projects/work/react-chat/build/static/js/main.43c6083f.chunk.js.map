{"version":3,"sources":["DisplayMessages.jsx","LoginPage.jsx","services.js","DisplayLoggedInUsers.jsx","DisplayChatPage.jsx","InitialPage.jsx","App.jsx","serviceWorker.js","index.js"],"names":["DisplayMessages","message","Object","keys","map","messageId","className","key","user","timeStamp","text","LoginPage","useState","setMessages","username","setUsername","error","setError","performLogin","fetch","method","headers","body","JSON","stringify","catch","Promise","reject","code","then","response","ok","json","err","fetchLogIn","userInfo","messageIds","value","onChange","e","target","onClick","DisplayLoggedInUsers","loggedInUsers","loggedInUser","DisplayChatPage","setMessage","setMessageIds","loggedOut","setloggedOut","content","messages","performSend","fetchMessages","performLogout","InitialPage","useEffect","isLoggedin","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.43c6083f.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction DisplayMessages({message}) {\n\n    return(\n        Object.keys(message).map((messageId) => (\n            <li className=\"message\" key={messageId}><div className=\"meta-info\"><span className=\"user\">{message[messageId].user}</span>\n            <span className=\"at\">@</span><span className=\"time-stamp\">{message[messageId].timeStamp}</span></div>\n            <p className=\"text-message\">{message[messageId].text}</p></li>\n        ))           \n    );\n}\n\nexport default DisplayMessages;\n","import React from 'react';\nimport {fetchLogIn} from './services';\nimport { useState } from 'react';\nimport DisplayChatPage from './DisplayChatPage';\nimport './App.css';\n\nfunction LoginPage(){\n    const [message, setMessages] = useState();\n    const [username, setUsername] = useState('');\n    const [error, setError] = useState(\"\");\n\n    const performLogin = (username) => {\n        setError('');\n\n        fetchLogIn(username)\n        .then((userInfo) => setMessages(userInfo))\n        .catch((error) => setError(error.error))\n        setUsername('');\n    }\n\n    if(message) {\n        return(\n            <DisplayChatPage messageIds={message}/>\n        );\n    }\n\n    return(\n        <div className=\"login\">\n            <h2 className=\"error\">{error}</h2>\n            <label>Username:<input value={username} onChange={(e) => setUsername(e.target.value)}/></label>\n            <button className=\"login-button\" onClick={() => performLogin(username)}>Login</button>\n        </div>\n    );\n\n}\n\nexport default LoginPage;\n","export const fetchHomePage = () => {\n    return fetch(`/home`, {\n        method: \"GET\"\n    })\n    .catch( () => {\n        return Promise.reject({code: 'network-error'});\n    })\n    .then( (response) => {\n        if(response.ok) {\n            return response.json();\n        }\n        return response.json()\n        .then( err => Promise.reject(err) );\n    });\n};\n  \nexport const fetchLogOut = () => {\n    return fetch('/logout', {\n        method: 'GET',\n    })\n    .catch( () => {\n        return Promise.reject({code: 'network-error'});\n    })\n    .then( (response) => {\n        if(response.ok) {\n            return response.json();\n        }\n        return response.json()\n        .then( err => Promise.reject(err) );\n    });\n};\n  \nexport const fetchMessages = (message) => {\n    return fetch('/sendMessage', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            text: message\n        })\n    })\n    .catch( () => {\n        return Promise.reject({code: 'network-error'});\n    })\n    .then( (response) => {\n        if(response.ok) {\n            return response.json();\n        }\n        return response.json()\n        .then( err => Promise.reject(err) );\n    });\n};\n\nexport const fetchLogIn = (username) => {\n    return fetch(`/login`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            user: username\n        })\n    })\n    .catch( () => {\n        return Promise.reject({code: 'network-error'});\n    })\n    .then( (response) => {\n        if(response.ok) {\n            return response.json();\n        }\n        return response.json()\n        .then( err => Promise.reject(err) );\n    });\n};\n","import React from 'react';\nimport './App.css';\n\nfunction DisplayLoggedInUsers({loggedInUsers}) {\n    return (\n        <ul className=\"display-users\">\n          { loggedInUsers.map( loggedInUser => (<li className=\"logged-in-users\" key={loggedInUser}>{loggedInUser}</li>) ) }\n        </ul>\n      );\n}\n\nexport default DisplayLoggedInUsers;","import React from 'react'\nimport { useState } from 'react';\nimport { fetchMessages , fetchLogOut} from './services';\nimport DisplayMessages from './DisplayMessages';\nimport LoginPage from './LoginPage';    \nimport DisplayLoggedInUsers from './DisplayLoggedInUsers';\nimport './App.css';\n\nfunction DisplayChatPage({messageIds}) {\n    const [message, setMessage] = useState('');\n    const [error, setError] = useState();\n    const [messageId, setMessageIds] = useState(messageIds);\n    const [loggedOut, setloggedOut] = useState(false);\n    let content = <DisplayMessages message={messageId.messages}/>;\n    \n    const performSend = () => {\n        setError('');\n\n        fetchMessages(message)\n        .then((messageIds) => setMessageIds(messageIds))\n        .catch((error) => setError(error.error))\n        setMessage('');\n    }\n\n    const performLogout = () => {\n        setError('')\n\n        fetchLogOut()\n        .then(() => setloggedOut(true))\n        .catch((error) => setError(error.error))\n    }\n\n    if (loggedOut) {\n        return (\n            <LoginPage />\n        );\n    }\n\n    return (\n        <div>\n            <div>\n                <button className=\"logout-button\" onClick={() => performLogout()}>Logout</button>\n            </div>\n            <div className=\"active-users\">\n                <h3 className=\"header\">Active Users</h3>\n                <DisplayLoggedInUsers loggedInUsers={messageId.loggedInUsers}/>              \n            </div>\n            <div className=\"display-panel\">\n                <p className={error}>{error}</p>\n                <ol className=\"send-messages\">\n                    <div className=\"messsage\">\n                        {content}\n                    </div>\n                </ol>\n            </div>\n            <div className=\"send-form\">\n                <label>Enter your message<input value={message} onChange={(e) => setMessage(e.target.value)}/></label>\n                <button onClick={() => performSend()}>Send</button>\n            </div>\n        </div>       \n    );\n  }\n  \nexport default DisplayChatPage;\n","import React, {useEffect, useState} from 'react';\nimport DisplayChatPage from './DisplayChatPage';\nimport {fetchHomePage} from './services';\nimport LoginPage from './LoginPage';\nimport './App.css';\n\nfunction InitialPage() {\n    const [message, setMessage] = useState({});\n    const[error, setError] = useState(\"\");\n    let content;\n    useEffect(() => {\n        setError('');\n\n        fetchHomePage()\n        .then(messages => setMessage(messages))\n        .catch(error => setError(error));     \n    },[]);\n\n    if (message.isLoggedin) {\n        content = <DisplayChatPage messageIds={message} />                    \n    } else {\n        content = <LoginPage />\n    }\n\n    return(\n        <div>\n            <h2 className=\"error\">{error}</h2>\n            {content}\n\n        </div>\n    );     \n\n}\n\nexport default InitialPage;\n","import React from 'react';\nimport './App.css';\nimport InitialPage from './InitialPage.jsx';\nimport './App.css';\n\nfunction App() {\n  return (\n    <ul className=\"chat-app\">\n      <InitialPage/>\n    </ul>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}